[{"filePath":"DEMO/src/usr/README.md","declarations":[{"markdownContent":"# [Fluent UI library](https://developer.microsoft.com/en-us/fluentui#/controls/web)\n\n> Current version of the library: `1.0.0`\n\n### Watch video tutorial\n\n* [Introduction video](https://youtu.be/jeZyOjZKxYc)\n\n### Download project template:\n\n* Choose the appropriate boilerplate for your new project and download it to your local disk. \n\n| Framework | Boilerplate | Repository |\n|---|---|---|\n| Create React App | [Download]()  | [Source Code]() |\n\n### Contribute\n\n* We will be happy if you create a new PR for this library in GitHub repo: [wcd-fluent-ui](https://github.com/react-ui-builder/wcd-fluent-ui).\n\n## Community\n\n* If you need any help, don't be afraid to speak up!\n\nYou can ask questions at [Spectrum chat](https://spectrum.chat/react-ui-builder)\n"}],"resourceType":"RESOURCE_IN_MARKDOWN_TYPE"},{"filePath":"DEMO/src/usr/sections/DataForm.comp.tsx","declarations":[{"componentName":"DataForm","properties":[{"type":"COMPONENT_PROPERTY_ARRAY_OF_TYPE","props":{"propertyName":"formControls","defaultChildren":[{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{},"children":[{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"label"}},{"type":"COMPONENT_PROPERTY_ONE_OF_TYPE","props":{"propertyName":"type","propertyValueVariants":[{"value":"type1"}],"propertyValue":"type1"}},{"type":"COMPONENT_PROPERTY_ARRAY_OF_TYPE","props":{"propertyName":"values","defaultChildren":[{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{},"children":[{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"id"}}]}]},"children":[]}]}]},"children":[]}],"defaultProps":{"formControls":[]},"wcdAnnotations":{"annotationComment":"\n DataForm\n"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/atoms/buttons/PrimaryButton.comp.tsx","declarations":[{"componentName":"PrimaryButton","properties":[{"type":"COMPONENT_PROPERTY_BOOL_TYPE","props":{"propertyName":"allowDisabledFocus","propertyComment":"\n Whether the button can have focus in disabled mode\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_FUNCTION_TYPE","props":{"propertyName":"onClick","propertyComment":"\n Triggered when the user clicks on the button\n"}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"text","isRequired":true,"propertyComment":"\n Label of the button.\n","propertyValue":null}}],"defaultProps":{"text":"Button"},"wcdAnnotations":{"annotationComment":"\n Button is generated by Webcodesk. Replace this comment with a valuable description.\n"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/atoms/buttons/PrimaryButton.md","declarations":[{"markdownContent":"Buttons are best used to enable a user to commit a change or complete steps in a task. They are typically found inside forms, dialogs, panels or pages. An example of their usage is confirming the deletion of a file in a confirmation dialog.\n\nWhen considering their place in a layout, contemplate the order in which a user will flow through the UI. As an example, in a form, the individual will need to read and interact with the form fields before submiting the form. Therefore, as a general rule, the button should be placed at the bottom of the UI container (a dialog, panel, or page) which holds the related UI elements.\n\nWhile buttons can technically be used to navigate a user to another part of the experience, this is not recommended unless that navigation is part of an action or their flow.\n\n"}],"resourceType":"RESOURCE_IN_MARKDOWN_TYPE"},{"filePath":"DEMO/src/usr/settings.conf.ts","declarations":[{"properties":[{"type":"COMPONENT_PROPERTY_ONE_OF_TYPE","props":{"propertyName":"theme","propertyComment":"\n The theme specifies the color of the components, darkness of the surfaces, level of shadow, appropriate opacity of ink elements, etc.\n","propertyValue":"light","propertyValueVariants":[{"value":"light"},{"value":"dark"}]}}],"defaultProps":{"theme":"light"}}],"resourceType":"RESOURCE_IN_SETTINGS_CONF_TYPE"},{"filePath":"DEMO/src/usr/page/PageWithSidebar.comp.tsx","declarations":[{"componentName":"PageWithSidebar","properties":[{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{"propertyName":"centralArea","propertyComment":"\n The central area in the page\n"},"children":[{"type":"COMPONENT_PROPERTY_ELEMENT_TYPE","props":{"propertyName":"centralAreaElement","propertyComment":"\n Sets the central area element\n","componentName":"__PlaceHolder"}}]},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"commandBarHeight","propertyValue":null}},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"headerBarHeight","propertyValue":null}},{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{"propertyName":"leftArea"},"children":[{"type":"COMPONENT_PROPERTY_ELEMENT_TYPE","props":{"propertyName":"leftAreaElement","propertyComment":"\n The left area element\n","componentName":"__PlaceHolder"}},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"leftAreaWidth","propertyComment":"\n The width of the left drawer. Should be a number value in pixels.\n"}}]},{"type":"COMPONENT_PROPERTY_NUMBER_TYPE","props":{"propertyName":"mobileBreakpoint","propertyValue":null}}],"defaultProps":{"headerBarHeight":52,"commandBarHeight":52,"mobileBreakpoint":1024,"leftArea":{"leftAreaWidth":250,"leftAreaElement":{}},"centralArea":{"centralAreaElement":{}}},"wcdAnnotations":{"annotationComment":"\n PageFrame\n"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/layout/Grid.comp.tsx","declarations":[{"componentName":"Grid","properties":[{"type":"COMPONENT_PROPERTY_ARRAY_OF_TYPE","props":{"propertyName":"rows","defaultChildren":[{"type":"COMPONENT_PROPERTY_ELEMENT_TYPE","props":{"componentName":"__PlaceHolder"}}]},"children":[]}],"defaultProps":{"rows":[]},"wcdAnnotations":{"annotationComment":"\n Grid\n"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/layout/GridRow.comp.tsx","declarations":[{"componentName":"GridRow","properties":[{"type":"COMPONENT_PROPERTY_ARRAY_OF_TYPE","props":{"propertyName":"columns","defaultChildren":[{"type":"COMPONENT_PROPERTY_ELEMENT_TYPE","props":{"componentName":"__PlaceHolder"}}]},"children":[]}],"defaultProps":{"columns":[]},"wcdAnnotations":{"annotationComment":"\n Grid\n"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/layout/GridRowColumn.comp.tsx","declarations":[{"componentName":"GridRowColumn","properties":[{"type":"COMPONENT_PROPERTY_ELEMENT_TYPE","props":{"propertyName":"element","componentName":"__PlaceHolder"}},{"type":"COMPONENT_PROPERTY_ONE_OF_TYPE","props":{"propertyName":"size","propertyValue":null,"propertyValueVariants":[{"value":"1"},{"value":"2"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"},{"value":"7"},{"value":"8"},{"value":"9"},{"value":"10"},{"value":"11"},{"value":"12"}]}}],"defaultProps":{"size":"2","element":{}},"wcdAnnotations":{"annotationComment":"\n Grid\n"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/atoms/form/BasicForm.comp.tsx","declarations":[{"componentName":"BasicForm","properties":[{"type":"COMPONENT_PROPERTY_ARRAY_OF_TYPE","props":{"propertyName":"formElements","defaultChildren":[{"type":"COMPONENT_PROPERTY_SHAPE_TYPE","props":{},"children":[{"type":"COMPONENT_PROPERTY_ONE_OF_TYPE","props":{"propertyName":"componentType","propertyValueVariants":[{"value":"input-text"},{"value":"input-number"},{"value":"checkbox"}],"propertyValue":"input-text"}}]}]},"children":[]},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"headerLabel","propertyComment":"\n Form header text\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_OBJECT_TYPE","props":{"propertyName":"headerStyle","propertyComment":"\n Form header style\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_FUNCTION_TYPE","props":{"propertyName":"onCancel","propertyComment":"\n Triggered when user cancel submission\n"}},{"type":"COMPONENT_PROPERTY_FUNCTION_TYPE","props":{"propertyName":"onSubmit","propertyComment":"\n Triggered when user submit form\n"}}],"defaultProps":{"formElements":[]},"wcdAnnotations":{"annotationComment":"\n Button is generated by Webcodesk. Replace this comment with a valuable description.\n"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"},{"filePath":"DEMO/src/usr/atoms/inputs/TextField.comp.tsx","declarations":[{"componentName":"TextField","properties":[{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"label","propertyComment":"\n Label displayed above the text field (and read by screen readers).\n","propertyValue":null}},{"type":"COMPONENT_PROPERTY_FUNCTION_TYPE","props":{"propertyName":"onChange","propertyComment":"\n Callback for when the input value changes. This is called on both input and change events.\n"}},{"type":"COMPONENT_PROPERTY_STRING_TYPE","props":{"propertyName":"value","propertyComment":"\n Current value of the text field. Only provide this if the text field is a controlled component where you are maintaining its current state; otherwise, use the defaultValue property.\n","propertyValue":null}}],"defaultProps":{"label":"Text Field","value":"Text"},"wcdAnnotations":{"annotationComment":"\n Button is generated by Webcodesk. Replace this comment with a valuable description.\n"}}],"resourceType":"RESOURCE_IN_COMPONENTS_TYPE"}]
