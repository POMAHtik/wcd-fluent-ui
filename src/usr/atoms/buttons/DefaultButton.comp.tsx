import React from 'react';
import PropTypes from 'prop-types';
import { DefaultButton as DefaultButtonOF, IIconProps} from '@fluentui/react';
import pickWithValues from "usr/a_lib/utils/pickWithValues";

export interface DefaultButtonProps {
    ariaLabel?: string;
    ariaDescription?: string;
    ariaHidden?: boolean;
    toggle?: boolean;
    href?: string;
    disabled?: boolean;
    primary?: boolean;
    allowDisabledFocus?: boolean;
    iconName?: string;
    text: string;
    onClick?: () => void;
}

/**
 * Button is generated by Webcodesk. Replace this comment with a valuable description.
 */
class DefaultButton extends React.Component<DefaultButtonProps, any> {

    static propTypes: PropTypes.InferProps<DefaultButtonProps> = {
        
        /**
        * The aria label of the button for the benefit of screen readers.
        */
        ariaLabel: PropTypes.string,
        /**
         * Detailed description of the button for the benefit of screen readers.
         *
         * Besides the compound button, other button types will need more information provided to screen reader.
         */
        ariaDescription: PropTypes.string,
        /**
         * If provided and is true it adds an 'aria-hidden' attribute instructing screen readers to ignore the element.
         */
        ariaHidden: PropTypes.bool,
        /**
         * Whether button is a toggle button with distinct on and off states. This should be true for buttons that permanently
         * change state when a press event finishes, such as a volume mute button.
         */
        toggle: PropTypes.bool,
        /**
         * If provided, this component will be rendered as an anchor.
         * @defaultvalue ElementType.anchor
         */
        href: PropTypes.string,
        /**
         * Whether the button is disabled
         */
        disabled: PropTypes.bool,
        /** 
         * Whether the button can have focus in disabled mode
         */
        primary: PropTypes.bool,
        /**
         * Whether the button can have focus in disabled mode
         */
        allowDisabledFocus: PropTypes.bool,
        /**
         * The props for the icon shown in the button.
         */
        iconName: PropTypes.oneOf(['None', 'Add', 'Mail', 'Home']),
        /**
         * Label of the button.
         */
        text: PropTypes.string.isRequired,
        /**
         * Triggered when the user clicks on the button
         */
        onClick: PropTypes.func,
    };
    buttonIcon?: IIconProps;
    static defaultProps: DefaultButtonProps = {
        text: 'Button',
    };

  // constructor(props: PrimaryButtonProps) {
  //   super(props);
  // }

  handleButtonClick = (e: React.MouseEvent<HTMLElement>): void => {
    if (e) {
      e.stopPropagation();
      e.preventDefault();
    }
    if (this.props.onClick) {
      this.props.onClick();
    }
    };
    render() {
        if (this.props.iconName === 'None')
            this.buttonIcon = undefined;
        else
                this.buttonIcon = { iconName: this.props.iconName }
        const {
            ariaLabel,
            ariaDescription,
            ariaHidden,
            toggle,
            href,
            disabled,
            primary,
            allowDisabledFocus,
            text
        } = this.props;
        const properties = pickWithValues({ ariaLabel, ariaDescription, ariaHidden, toggle, href, disabled, primary, allowDisabledFocus, text});
        return (
            <DefaultButtonOF
                {...properties}
                iconProps={this.buttonIcon}
                onClick={this.handleButtonClick}
            />);
    }
}

export default DefaultButton;
