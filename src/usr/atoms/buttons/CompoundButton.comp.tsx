import React from 'react';
import PropTypes from 'prop-types';
import { CompoundButton as CompoundButtonOF  } from '@fluentui/react';
import pickWithValues from "usr/a_lib/utils/pickWithValues";

export interface CompoundButtonProps {
    ariaLabel?: string;
    ariaDescription?: string;
    ariaHidden?: boolean;
    href?: string;
    disabled?: boolean;
    primary?: boolean;
    allowDisabledFocus?: boolean;
    secondaryText: string;
    text: string;
    onClick?: () => void;
}

/**
 * Button is generated by Webcodesk. Replace this comment with a valuable description.
 */
class CompoundButton extends React.Component<CompoundButtonProps, any> {

    static propTypes: PropTypes.InferProps<CompoundButtonProps> = {

        /**
        * The aria label of the button for the benefit of screen readers.
        */
        ariaLabel: PropTypes.string,
        /**
         * Detailed description of the button for the benefit of screen readers.
         *
         * Besides the compound button, other button types will need more information provided to screen reader.
         */
        ariaDescription: PropTypes.string,
        /**
         * If provided and is true it adds an 'aria-hidden' attribute instructing screen readers to ignore the element.
         */
        ariaHidden: PropTypes.bool,
        /**
         * If provided, this component will be rendered as an anchor.
         * @defaultvalue ElementType.anchor
         */
        href: PropTypes.string,
        /**
         * Whether the button is disabled
         */
        disabled: PropTypes.bool,
        /** 
        * Whether the button can have focus in disabled mode
        */
        primary: PropTypes.bool,
        /**
       * Whether the button can have focus in disabled mode
       */
        allowDisabledFocus: PropTypes.bool,
        /**
        * Description of the action this button takes.
        * Only used for compound buttons
        */
        secondaryText: PropTypes.string,
        /**
         * Label of the button.
         */
        text: PropTypes.string.isRequired,
        /**
         * Triggered when the user clicks on the button
         */
        onClick: PropTypes.func,
    };

    static defaultProps: CompoundButtonProps = {
        secondaryText: 'Secondary Text',
        text: 'Button',
    };

    // constructor(props: PrimaryButtonProps) {
    //   super(props);
    // }

    handleButtonClick = (e: React.MouseEvent<HTMLElement>): void => {
        if (e) {
            e.stopPropagation();
            e.preventDefault();
        }
        if (this.props.onClick) {
            this.props.onClick();
        }
    };

    render() {
        const {
            ariaLabel,
            ariaDescription,
            ariaHidden,
            href,
            disabled,
            primary,
            allowDisabledFocus,
            secondaryText,
            text
        } = this.props;
        const properties = pickWithValues({ ariaLabel, ariaDescription, ariaHidden, href, disabled, primary, allowDisabledFocus, secondaryText, text });
        return (
            <CompoundButtonOF
                {...properties}
                onClick={this.handleButtonClick}
            />);
    }
}

export default CompoundButton;
