import React from 'react';
import PropTypes, { string } from 'prop-types';
import { CommandButton as CommandButtonOF, IContextualMenuProps, IContextualMenuItem, IIconProps } from '@fluentui/react';
import pickWithValues from "usr/a_lib/utils/pickWithValues";
import { MenuItem } from "usr/atoms/buttons/MenuItem.props"
import { IconProps } from '../icons/IconProps.props';

export interface CommandButtonProps {
    ariaLabel?: string;
    ariaDescription?: string;
    ariaHidden?: boolean;
    href?: string;
    disabled?: boolean;
    allowDisabledFocus?: boolean;
    text: string;
    onClick?: () => void;
    iconProps?: IIconProps;
    split?: boolean;

    menuItems: IContextualMenuItem[];
}



/**
 * Button is generated by Webcodesk. Replace this comment with a valuable description.
 */
class CommandButton extends React.Component<CommandButtonProps, any> {

    static propTypes: PropTypes.InferProps<CommandButtonProps> = {

        /**
         * Props for button menu. Providing this will default to showing the menu icon. See menuIconProps for overriding
         * how the default icon looks. Providing this in addition of onClick and setting the split property to true will
         * render a SplitButton.
         */
        menuItems: PropTypes.arrayOf(PropTypes.shape(MenuItem)),
        /**
        * The aria label of the button for the benefit of screen readers.
        */
        ariaLabel: PropTypes.string,
        /**
         * Detailed description of the button for the benefit of screen readers.
         *
         * Besides the compound button, other button types will need more information provided to screen reader.
         */
        ariaDescription: PropTypes.string,
        /**
         * If provided and is true it adds an 'aria-hidden' attribute instructing screen readers to ignore the element.
         */
        ariaHidden: PropTypes.bool,
        /**
         * If provided, this component will be rendered as an anchor.
         * @defaultvalue ElementType.anchor
         */
        href: PropTypes.string,
        /**
         * Whether the button is disabled
         */
        disabled: PropTypes.bool,
        /**
       * Whether the button can have focus in disabled mode
       */
        allowDisabledFocus: PropTypes.bool,
        /**
         * Label of the button.
         */
        text: PropTypes.string.isRequired,
        /**
         * Triggered when the user clicks on the button
         */
        onClick: PropTypes.func,
        /**
         * If set to true, and if menuProps and onClick are provided, the button will render as a SplitButton.
         * @defaultvalue false
         */
        split: PropTypes.bool,

        /**
         * The props for the icon shown in the button.
         */
        iconProps: PropTypes.shape(IconProps),
    };

    static defaultProps: CommandButtonProps = {
        text: 'Button',
        menuItems: [],
    };

    // constructor(props: PrimaryButtonProps) {
    //   super(props);
    // }

    handleButtonClick = (e: React.MouseEvent<HTMLElement>): void => {
        if (e) {
            e.stopPropagation();
            e.preventDefault();
        }
        if (this.props.onClick) {
            this.props.onClick();
        }
    };

    render() {

        const {
            ariaLabel,
            ariaDescription,
            ariaHidden,
            href,
            disabled,
            allowDisabledFocus,
            text,
            menuItems,
            iconProps,
            split
        } = this.props;

        const menuProps: IContextualMenuProps = {
            items: menuItems
        }

        const properties =
            pickWithValues({
                ariaLabel, ariaDescription, ariaHidden, href, disabled, allowDisabledFocus, text, iconProps, split, });

        return (
            <CommandButtonOF
                {...properties}
                menuProps={menuItems && menuItems.length ? menuProps : undefined}
                onClick={this.handleButtonClick}
            />);
    }
}

export default CommandButton;
