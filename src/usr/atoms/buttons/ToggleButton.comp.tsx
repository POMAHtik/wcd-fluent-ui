import React from 'react';
import PropTypes from 'prop-types';
import { DefaultButton as ToggleButtonOF, IIconProps } from '@fluentui/react';
import pickWithValues from "usr/a_lib/utils/pickWithValues";

export interface ToggleButtonProps {
    ariaLabel?: string;
    ariaDescription?: string;
    ariaHidden?: boolean;
    href?: string;
    disabled?: boolean;
    primary?: boolean;
    allowDisabledFocus?: boolean;
    iconName?: string;
    altIconName?: string;
    text: string;
    altText?: string;
    //events:
    onClick?: () => void;
}

/**
 * Button is generated by Webcodesk. Replace this comment with a valuable description.
 */
class ToggleButton extends React.Component<ToggleButtonProps, any> {

    static propTypes: PropTypes.InferProps<ToggleButtonProps> = {

        /**
        * The aria label of the button for the benefit of screen readers.
        */
        ariaLabel: PropTypes.string,
        /**
         * Detailed description of the button for the benefit of screen readers.
         *
         * Besides the compound button, other button types will need more information provided to screen reader.
         */
        ariaDescription: PropTypes.string,
        /**
         * If provided and is true it adds an 'aria-hidden' attribute instructing screen readers to ignore the element.
         */
        ariaHidden: PropTypes.bool,
        /**
         * If provided, this component will be rendered as an anchor.
         * @defaultvalue ElementType.anchor
         */
        href: PropTypes.string,
        /**
         * Whether the button is disabled
         */
        disabled: PropTypes.bool,
        /** 
         * Whether the button can have focus in disabled mode
         */
        primary: PropTypes.bool,
        /**
         * Whether the button can have focus in disabled mode
         */
        allowDisabledFocus: PropTypes.bool,
        /**
         * The props for the icon shown in the button.
         */
        iconName: PropTypes.oneOf(['undefined', 'Add', 'Mail', 'Home']),
        /**
         * Label of the button.
         */
        text: PropTypes.string.isRequired,
        /**
        * The props for the icon shown in the button.
        */
        altIconName: PropTypes.oneOf(['undefined', 'Add', 'Mail', 'Home']),
        /**
         * Label of the button.
         */
        altText: PropTypes.string.isRequired,
        /**
         * Triggered when the user clicks on the button
         */
        onClick: PropTypes.func,
    };
    buttonIcon?: IIconProps;
    altButtonIcon?: IIconProps;
    static defaultProps: ToggleButtonProps = {
        text: 'Button',
        altText: 'Does not work yet'
    };

    // constructor(props: PrimaryButtonProps) {
    //   super(props);
    // }

    handleButtonClick = (e: React.MouseEvent<HTMLElement>): void => {
        if (e) {
            e.stopPropagation();
            e.preventDefault();
        }
        if (this.props.onClick) {
            this.props.onClick();
        }
    };

    render() {
        this.buttonIcon = { iconName: this.props.iconName }
        this.altButtonIcon = { iconName: this.props.altIconName }
        const {
            ariaLabel,
            ariaDescription,
            ariaHidden,
            href,
            disabled,
            primary,
            allowDisabledFocus,
            text,
            altText
            
        } = this.props;
        const [checked, setChecked] = React.useState <boolean>(false);
        const onClick = () => setChecked(!checked);
        
        const properties = pickWithValues({ ariaLabel, ariaDescription, ariaHidden, href, disabled, primary, allowDisabledFocus});
        return (
            <ToggleButtonOF
                toggle
                {...properties}
                checked={checked}
                text={checked ? text : altText}
                iconProps={checked ? this.buttonIcon : this.altButtonIcon}
                onClick={onClick}
            />);
    }
}

export default ToggleButton;